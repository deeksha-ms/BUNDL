% EEG = pop_sereega_addarm(EEG)
%
%       Pops up a dialog window that allows you to add an ARM class to the
%       simulation, or multiple data classes representing interacting ARM
%       activations.
%
%       The pop_ functions serve only to provide a GUI for some of
%       SEREEGA's functions and are not intended to be used in scripts.
%
% In:
%       EEG - an EEGLAB dataset
%
% Out:  
%       EEG - the EEGLAB dataset with arm or data classes added to 
%             EEG.etc.sereega.signals depending on the actions taken in the
%             dialog window
% 
%                    Copyright 2018 Laurens R Krol
%                    Team PhyPA, Biological Psychology and Neuroergonomics,
%                    Berlin Institute of Technology

% 2018-045-01 First version

% This file is part of Simulating Event-Related EEG Activity (SEREEGA).

% SEREEGA is free software: you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation, either version 3 of the License, or
% (at your option) any later version.

% SEREEGA is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.

% You should have received a copy of the GNU General Public License
% along with SEREEGA.  If not, see <http://www.gnu.org/licenses/>.

function EEG = pop_sereega_addarm(EEG)

if ~isfield(EEG.etc, 'sereega') || ~isfield(EEG.etc.sereega, 'signals')
    EEG.etc.sereega.signals = {};
end

[~, ~, ~, structout] = inputgui( ...
        'geometry', { 1 1 [1 3] 1 [1 1 1 1] [1 1 1 1] [1 1 1 1] [1 1 1 1] 1 1 [1 1 2] [1 1 2] [2 2] [2 2]}, ...
        'geomvert', [1 1 1 1 1 1 1 1 1 1 1 1 1 1], ...
        'uilist', { ...
                { 'style', 'text', 'string', 'Add autoregressive signal', 'fontweight', 'bold' }, ...
                { }, ...
                { 'style', 'text', 'string', 'Type *' }, ...
                { 'style', 'popupmenu', 'string', 'single activation based on ARM|interactions between sources based on ARM', 'tag', 'type' }, ...
                { }, ...
                { 'style', 'text', 'string', 'Parameter', 'fontweight', 'bold' }, ...
                { 'style', 'text', 'string', 'Base value *', 'fontweight', 'bold' }, ...
                { 'style', 'text', 'string', 'Deviation', 'fontweight', 'bold' }, ...
                { 'style', 'text', 'string', 'Slope', 'fontweight', 'bold' }, ...
                { 'style', 'text', 'string', 'Order *' }, ...
                { 'style', 'edit', 'string', '', 'tag', 'order' }, ...
                { }, ...
                { }, ...
                { 'style', 'text', 'string', 'Amplitude *' }, ...
                { 'style', 'edit', 'string', '', 'tag', 'amplitude' }, ...
                { 'style', 'edit', 'string', '', 'tag', 'amplitudedv' }, ...
                { 'style', 'edit', 'string', '', 'tag', 'amplitudeslope' }, ...
                { 'style', 'text', 'string', 'Probability' }, ...
                { 'style', 'edit', 'string', '', 'tag', 'probability' }, ...
                { }, ...
                { 'style', 'edit', 'string', '', 'tag', 'probabilityslope' }, ...
                { }, ...
                { 'style', 'text', 'string', 'In case of interactions:' }, ...
                { 'style', 'text', 'string', 'Num. sources *' }, ...
                { 'style', 'edit', 'string', '', 'tag', 'numSources' }, ...
                { }, ...
                { 'style', 'text', 'string', 'Interactions *' }, ...
                { 'style', 'edit', 'string', '', 'tag', 'interactions' }, ...
                { 'style', 'checkbox', 'string', 'Plot interactions when done', 'tag', 'plotInteractions' }, ...
                { }, ...
                { 'style', 'text', 'string', 'Note: plot pauses MATLAB;' }, ...
                { }, ...
                { 'style', 'text', 'string', 'close figure before unpausing' }, ...
                }, ... 
        'helpcom', 'pophelp(''arm_check_class'');doc(''arm_get_class_interacting'');', ...
        'title', 'Add ARM');

if ~isempty(structout)
    % user pressed OK
    arm = struct('type', 'arm');
    
    if ~isempty(structout.order)
        arm.order = str2num(structout.order); end
    if ~isempty(structout.amplitude)
        arm.amplitude = str2num(structout.amplitude); end
    if ~isempty(structout.amplitudedv)
        arm.amplitudeDv = str2num(structout.amplitudedv); end
    if ~isempty(structout.amplitudeslope)
        arm.amplitudeSlope = str2num(structout.amplitudeslope); end
    if ~isempty(structout.probability)
        arm.probability = str2num(structout.probability); end
    if ~isempty(structout.probabilityslope)
        arm.probabilitySlope = str2num(structout.probabilityslope); end
    
    arm = utl_check_class(arm);
    
    if structout.type == 1
        EEG.etc.sereega.signals = [EEG.etc.sereega.signals, {arm}];
    else
        if ~isfield(EEG.etc.sereega, 'epochs')
            errormsg = 'First configure the epochs.';
            supergui( 'geomhoriz', { 1 1 1 }, 'uilist', { ...
                    { 'style', 'text', 'string', errormsg }, { }, ...
                    { 'style', 'pushbutton' , 'string', 'OK', 'callback', 'close(gcbf);'} }, ...
                    'title', 'Error');
        end
        
        if ~isempty(structout.numSources)
            numSources = str2num(structout.numSources); end
        if ~isempty(structout.interactions)
            interactions = str2num(structout.interactions); end
        
        arms = arm_get_class_interacting(numSources, arm.order, ...
                interactions, EEG.etc.sereega.epochs, arm.amplitude, ...
                'amplitudeDv', arm.amplitudeDv, ...
                'amplitudeSlope', arm.amplitudeSlope, ...
                'probability', arm.probability, ...
                'probabilitySlope', arm.probabilitySlope, ...
                'plotInteractions', structout.plotInteractions);
        if structout.plotInteractions, pause; end
            
        for i = 1:numSources
            EEG.etc.sereega.signals = [EEG.etc.sereega.signals, {arms(i)}];
        end
    end
end

end
