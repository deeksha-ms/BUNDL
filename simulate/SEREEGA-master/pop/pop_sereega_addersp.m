% EEG = pop_sereega_addersp(EEG)
%
%       Pops up a dialog window that allows you to add an ERSP class to the
%       simulation.
%
%       The pop_ functions serve only to provide a GUI for some of
%       SEREEGA's functions and are not intended to be used in scripts.
%
% In:
%       EEG - an EEGLAB dataset
%
% Out:  
%       EEG - the EEGLAB dataset with an ERSP class added to 
%             EEG.etc.sereega.signals depending on the actions taken in the
%             dialog window
% 
%                    Copyright 2018 Laurens R Krol
%                    Team PhyPA, Biological Psychology and Neuroergonomics,
%                    Berlin Institute of Technology

% 2018-06-18 lrk
%   - Added frequencyShift parameter
% 2018-04-30 First version

% This file is part of Simulating Event-Related EEG Activity (SEREEGA).

% SEREEGA is free software: you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation, either version 3 of the License, or
% (at your option) any later version.

% SEREEGA is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.

% You should have received a copy of the GNU General Public License
% along with SEREEGA.  If not, see <http://www.gnu.org/licenses/>.

function EEG = pop_sereega_addersp(EEG)

if ~isfield(EEG.etc, 'sereega') || ~isfield(EEG.etc.sereega, 'signals')
    EEG.etc.sereega.signals = {};
end

[~, ~, ~, structout] = inputgui( ...
        'geometry', { 1 1 [1 1 1 1 1] [1 1 1 1 1] [1 1 1 1 1] [1 1 1 1 1] [1 1 1 1 1] [1 1 1 1 1] 1 1 [1 1 1 1 1] [1 1 1 1 1] [1 1 1 1 1] [1 1 1 1 1] 1 1 [1 1 1 1 1] [1 1 1 1 1] [1 1 1 1 1] [1 1 1 1 1] [1 1 1 1 1] [1 1 1 1 1]}, ...
        'geomvert', [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1], ...
        'uilist', { ...
                { 'style', 'text', 'string', 'Add event-related spectral perturbation', 'fontweight', 'bold' }, ...
                { }, ...
                { 'style', 'text', 'string', 'Parameter', 'fontweight', 'bold' }, ...
                { 'style', 'text', 'string', 'Base value *', 'fontweight', 'bold' }, ...
                { 'style', 'text', 'string', 'Deviation', 'fontweight', 'bold' }, ...
                { 'style', 'text', 'string', 'Slope', 'fontweight', 'bold' }, ...
                { 'style', 'text', 'string', 'Shift', 'fontweight', 'bold' }, ...
                { 'style', 'text', 'string', 'Frequency *' }, ...
                { 'style', 'edit', 'string', '', 'tag', 'frequency' }, ...
                { 'style', 'edit', 'string', '', 'tag', 'frequencydv' }, ...
                { 'style', 'edit', 'string', '', 'tag', 'frequencyslope' }, ...
                { 'style', 'edit', 'string', '', 'tag', 'frequencyshift' }, ...
                { 'style', 'text', 'string', 'Phase' }, ...
                { 'style', 'edit', 'string', '', 'tag', 'phase' }, ...
                { 'style', 'edit', 'string', '', 'tag', 'phasedv' }, ...
                { 'style', 'edit', 'string', '', 'tag', 'phaseslope' }, ...
                { }, ...
                { 'style', 'text', 'string', 'Amplitude *' }, ...
                { 'style', 'edit', 'string', '', 'tag', 'amplitude' }, ...
                { 'style', 'edit', 'string', '', 'tag', 'amplitudedv' }, ...
                { 'style', 'edit', 'string', '', 'tag', 'amplitudeslope' }, ...
                { }, ...
                { 'style', 'text', 'string', 'Probability' }, ...
                { 'style', 'edit', 'string', '', 'tag', 'probability' }, ...
                { }, ...
                { 'style', 'edit', 'string', '', 'tag', 'probabilityslope' }, ...
                { }, ...
                { 'style', 'text', 'string', 'Modulation *' }, ...
                { 'style', 'popupmenu', 'string', 'none|burst|invburst|ampmod', 'tag', 'modulation' }, ...
                { }, ...
                { }, ...
                { }, ...
                { }, ...
                { 'style', 'text', 'string', 'In case of burst/invburst modulation:' }, ...
                { 'style', 'text', 'string', 'Latency *' }, ...
                { 'style', 'edit', 'string', '', 'tag', 'modlatency' }, ...
                { 'style', 'edit', 'string', '', 'tag', 'modlatencydv' }, ...
                { 'style', 'edit', 'string', '', 'tag', 'modlatencyslope' }, ...
                { }, ...
                { 'style', 'text', 'string', 'Width *' }, ...
                { 'style', 'edit', 'string', '', 'tag', 'modwidth' }, ...
                { 'style', 'edit', 'string', '', 'tag', 'modwidthdv' }, ...
                { 'style', 'edit', 'string', '', 'tag', 'modwidthslope' }, ...
                { }, ...
                { 'style', 'text', 'string', 'Taper *' }, ...
                { 'style', 'edit', 'string', '', 'tag', 'modtaper' }, ...
                { 'style', 'edit', 'string', '', 'tag', 'modtaperdv' }, ...
                { 'style', 'edit', 'string', '', 'tag', 'modtaperslope' }, ...
                { }, ...
                { 'style', 'text', 'string', 'Min. rel. amplitude' }, ...
                { 'style', 'edit', 'string', '', 'tag', 'modminrelamplitude1' }, ...
                { 'style', 'edit', 'string', '', 'tag', 'modminrelamplitudedv1' }, ...
                { 'style', 'edit', 'string', '', 'tag', 'modminrelamplitudeslope1' }, ...
                { }, ...
                { }, ...
                { 'style', 'text', 'string', 'For ampmod modulation:' }, ...
                { 'style', 'text', 'string', 'Mod. frequency *' }, ...
                { 'style', 'edit', 'string', '', 'tag', 'modfrequency' }, ...
                { 'style', 'edit', 'string', '', 'tag', 'modfrequencydv' }, ...
                { 'style', 'edit', 'string', '', 'tag', 'modfrequencyslope' }, ...
                { }, ...
                { 'style', 'text', 'string', 'Mod. phase' }, ...
                { 'style', 'edit', 'string', '', 'tag', 'modphase' }, ...
                { 'style', 'edit', 'string', '', 'tag', 'modphasedv' }, ...
                { 'style', 'edit', 'string', '', 'tag', 'modphaseslope' }, ...
                { }, ...
                { 'style', 'text', 'string', 'Min. rel. amplitude' }, ...
                { 'style', 'edit', 'string', '', 'tag', 'modminrelamplitude2' }, ...
                { 'style', 'edit', 'string', '', 'tag', 'modminrelamplitudedv2' }, ...
                { 'style', 'edit', 'string', '', 'tag', 'modminrelamplitudeslope2' }, ...
                { }, ...
                { 'style', 'text', 'string', 'Prestim. period' }, ...
                { 'style', 'edit', 'string', '', 'tag', 'modprestimperiod' }, ...
                { }, ...
                { }, ...
                { }, ...
                { 'style', 'text', 'string', 'Prestim. taper' }, ...
                { 'style', 'edit', 'string', '', 'tag', 'modprestimtaper' }, ...
                { }, ...
                { }, ...
                { }, ...
                { 'style', 'text', 'string', 'Prestim. rel. ampl.' }, ...
                { 'style', 'edit', 'string', '', 'tag', 'modprestimrelamplitude' }, ...
                { }, ...
                { }, ...
                { }, ...
                }, ... 
        'helpcom', 'pophelp(''ersp_check_class'');', ...
        'title', 'Add ERSP');

if ~isempty(structout)
    % user pressed OK
    ersp = struct('type', 'ersp');
    if ~isempty(structout.frequency)
        ersp.frequency = str2num(structout.frequency); end
    if ~isempty(structout.frequencydv)
        ersp.frequencyDv = str2num(structout.frequencydv); end
    if ~isempty(structout.frequencyslope)
        ersp.frequencySlope = str2num(structout.frequencyslope); end
    if ~isempty(structout.frequencyshift)
        ersp.frequencyShift = str2num(structout.frequencyshift); end
    if ~isempty(structout.phase)
        ersp.phase = str2num(structout.phase); end
    if ~isempty(structout.phasedv)
        ersp.phaseDv = str2num(structout.phasedv); end
    if ~isempty(structout.phaseslope)
        ersp.phaseSlope = str2num(structout.phaseslope); end
    if ~isempty(structout.amplitude)
        ersp.amplitude = str2num(structout.amplitude); end
    if ~isempty(structout.amplitudedv)
        ersp.amplitudeDv = str2num(structout.amplitudedv); end
    if ~isempty(structout.amplitudeslope)
        ersp.amplitudeSlope = str2num(structout.amplitudeslope); end
    if ~isempty(structout.probability)
        ersp.probability = str2num(structout.probability); end
    if ~isempty(structout.probabilityslope)
        ersp.probabilitySlope = str2num(structout.probabilityslope); end
    
    modulation = {'none', 'burst', 'invburst', 'ampmod'};
    ersp.modulation = modulation{structout.modulation};
    
    if ~isempty(structout.modlatency)
        ersp.modLatency = str2num(structout.modlatency); end
    if ~isempty(structout.modlatencydv)
        ersp.modLatencyDv = str2num(structout.modlatencydv); end
    if ~isempty(structout.modlatency)
        ersp.modLatencySlope = str2num(structout.modlatencyslope); end
    if ~isempty(structout.modwidth)
        ersp.modWidth = str2num(structout.modwidth); end
    if ~isempty(structout.modwidthdv)
        ersp.modWidthDv = str2num(structout.modwidthdv); end
    if ~isempty(structout.modwidth)
        ersp.modWidthSlope = str2num(structout.modwidthslope); end
    if ~isempty(structout.modtaper)
        ersp.modTaper = str2num(structout.modtaper); end
    if ~isempty(structout.modtaperdv)
        ersp.modTaperDv = str2num(structout.modtaperdv); end
    if ~isempty(structout.modtaper)
        ersp.modTaperSlope = str2num(structout.modtaperslope); end
    
    if ~isempty(structout.modfrequency)
        ersp.modFrequency = str2num(structout.modfrequency); end
    if ~isempty(structout.modfrequencydv)
        ersp.modFrequencyDv = str2num(structout.modfrequencydv); end
    if ~isempty(structout.modfrequency)
        ersp.modFrequencySlope = str2num(structout.modfrequencyslope); end
    if ~isempty(structout.modphase)
        ersp.modPhase = str2num(structout.modphase); end
    if ~isempty(structout.modphasedv)
        ersp.modPhaseDv = str2num(structout.modphasedv); end
    if ~isempty(structout.modphase)
        ersp.modPhaseSlope = str2num(structout.modphaseslope); end
    if ~isempty(structout.modprestimperiod)
        ersp.modPrestimPeriod = str2num(structout.modprestimperiod); end
    if ~isempty(structout.modprestimtaper)
        ersp.modPrestimTaper = str2num(structout.modprestimptaper); end
    
    if strcmp(ersp.modulation, 'ampmod')
        if ~isempty(structout.modminrelamplitude2)
            ersp.modMinRelAmplitude = str2num(structout.modminrelamplitude2); end
        if ~isempty(structout.modminrelamplitudedv2)
            ersp.modMinRelAmplitudeDv = str2num(structout.modminrelamplitudedv2); end
        if ~isempty(structout.modminrelamplitudeslope2)
            ersp.modMinRelAmplitudeSlope = str2num(structout.modminrelamplitudeslope2); end
    else
        if ~isempty(structout.modminrelamplitude1)
            ersp.modMinRelAmplitude = str2num(structout.modminrelamplitude1); end
        if ~isempty(structout.modminrelamplitudedv1)
            ersp.modMinRelAmplitudeDv = str2num(structout.modminrelamplitudedv1); end
        if ~isempty(structout.modminrelamplitudeslope1)
            ersp.modMinRelAmplitudeSlope = str2num(structout.modminrelamplitudeslope1); end
    end
    
    ersp = utl_check_class(ersp);
    EEG.etc.sereega.signals = [EEG.etc.sereega.signals, {ersp}];
end

end

