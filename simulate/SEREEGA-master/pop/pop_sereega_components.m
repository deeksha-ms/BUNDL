% EEG = pop_sereega_components(EEG)
%
%       Pops up a dialog window that allows you to assign signals to source
%       locations (with corresponding orientations), thus completing the
%       definition of components.
%
%       The pop_ functions serve only to provide a GUI for some of
%       SEREEGA's functions and are not intended to be used in scripts.
%
%       "Remove component" - This removes the entire component from the
%             simulation, i.e., the source along with its orientation as
%             well as the component created by assigning (a) signal(s) to
%             that source.
%       "Remove signal" - This pops up a window of signals assigned to a
%             source and allows you to remove them.
%       "Add signal" - This pops up a window of signals defined earlier and
%             allows you to assign them to the selected source.
%       "Add signal to all" - As above, except this adds the selected
%             signals to all sources in the simulation.
%       "Plot component" - Plots the selected component's projection and
%             combined activation signal.
%
% In:
%       EEG - an EEGLAB dataset with sources or components configured, i.e.
%              at least partial entries in EEG.etc.sereega.components
%
% Out:  
%       EEG - the EEGLAB dataset with configured components depending on
%             the actions taken in the dialog window
% 
%                    Copyright 2018 Laurens R Krol
%                    Team PhyPA, Biological Psychology and Neuroergonomics,
%                    Berlin Institute of Technology

% 2018-05-02 First version

% This file is part of Simulating Event-Related EEG Activity (SEREEGA).

% SEREEGA is free software: you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation, either version 3 of the License, or
% (at your option) any later version.

% SEREEGA is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.

% You should have received a copy of the GNU General Public License
% along with SEREEGA.  If not, see <http://www.gnu.org/licenses/>.

function EEG = pop_sereega_components(EEG)

if ~isfield(EEG.etc, 'sereega') || ~isfield(EEG.etc.sereega, 'components')
    errormsg = 'First add sources to the simulation.';
    supergui( 'geomhoriz', { 1 1 1 }, 'uilist', { ...
            { 'style', 'text', 'string', errormsg }, { }, ...
            { 'style', 'pushbutton' , 'string', 'OK', 'callback', 'close(gcbf);'} }, ...
            'title', 'Error');
    return
end

% generating list of current signals
signallist = {};
for s = 1:numel(EEG.etc.sereega.signals)
    signallist = [signallist, {utl_class2string(EEG.etc.sereega.signals{s})}];
end

% setting userdata
userdata.EEG = EEG;
userdata.signallist = signallist;

% generating list of current components
currentcomponentlist = {};
for c = 1:numel(EEG.etc.sereega.components), ...
    str = sprintf('%d at ( %d, %d, %d ) with ', c, round(EEG.etc.sereega.leadfield.pos(EEG.etc.sereega.components(c).source,:)));
    if isempty(EEG.etc.sereega.components(c).signal)
        str = [str, 'no signal'];
    else
        for s = 1:numel(EEG.etc.sereega.components(c).signal)
            str = [str, utl_class2string(EEG.etc.sereega.components(c).signal{s}) '; '];
        end
    end
    currentcomponentlist = [currentcomponentlist, {str}]; ...
end

% general callback functions
cbf_get_userdata = 'userdatafig = gcf; userdata = get(userdatafig, ''userdata'');';
cbf_set_userdata = 'set(userdatafig, ''userdata'', userdata);';
cbf_get_value = @(tag,property) sprintf('get(findobj(''parent'', gcbf, ''tag'', ''%s''), ''%s'');', tag, property);
cbf_set_value = @(tag,property,value) sprintf('set(findobj(''parent'', gcbf, ''tag'', ''%s''), ''%s'', %s);', tag, property, value);
cbf_update_fields = [ ...
        cbf_get_userdata ...
        'currentcomponentlist = {};' ...
        'for c = 1:numel(userdata.EEG.etc.sereega.components),' ...
            'str = sprintf(''%d at ( %d, %d, %d ) with '', c, round(userdata.EEG.etc.sereega.leadfield.pos(userdata.EEG.etc.sereega.components(c).source,:)));' ...
            'if isempty(userdata.EEG.etc.sereega.components(c).signal),' ...
                'str = [str, ''no signal''];' ...
            'else,' ...
                'for s = 1:numel(userdata.EEG.etc.sereega.components(c).signal),' ...
                    'str = [str, utl_class2string(userdata.EEG.etc.sereega.components(c).signal{s}) ''; ''];' ...
                'end;' ...
            'end;' ...
            'currentcomponentlist = [currentcomponentlist, {str}];' ...
        'end;' ...
        cbf_set_value('currentcomponents', 'string', 'currentcomponentlist'); ...
        ];
    
% callbacks
cb_rmcomp = [ ...
        cbf_get_userdata ...
        'c = ' cbf_get_value('currentcomponents', 'value') ...
        'userdata.EEG.etc.sereega.components(c) = [];' ...
        cbf_set_userdata ...
        'if c > numel(userdata.EEG.etc.sereega.components),' ...
            cbf_set_value('currentcomponents', 'value', '1') ...
        'end;' ...
        cbf_update_fields ...
        ];
cb_rmsig = [ ...
        cbf_get_userdata ...
        'c = ' cbf_get_value('currentcomponents', 'value') ...
        'compsigs = {};' ...
        'for cs = 1:numel(userdata.EEG.etc.sereega.components(c).signal),' ...
            'compsigs = [compsigs, {utl_class2string(userdata.EEG.etc.sereega.components(c).signal{cs})}];' ...
        'end;' ...
        '[selection, ~] = pop_chansel(compsigs);' ...
        'if ~isempty(selection),' ...
            'userdata.EEG.etc.sereega.components(c).signal(selection) = [];' ...
        'end;' ...
        cbf_set_userdata ...
        cbf_update_fields ...
        ];
cb_addsig = [ ...
        cbf_get_userdata ...
        '[selection, ~] = pop_chansel(userdata.signallist);' ...
        'if ~isempty(selection),' ...
            'c = ' cbf_get_value('currentcomponents', 'value') ...
            'userdata.EEG.etc.sereega.components(c).signal = [userdata.EEG.etc.sereega.components(c).signal, userdata.EEG.etc.sereega.signals(selection)];' ...
        'end;' ...
        cbf_set_userdata ...
        cbf_update_fields ...
        ];
cb_addsigall = [ ...
        cbf_get_userdata ...
        '[selection, ~] = pop_chansel(userdata.signallist);' ...
        'if ~isempty(selection),' ...
            'for c = 1:numel(userdata.EEG.etc.sereega.components),' ...
                'userdata.EEG.etc.sereega.components(c).signal = [userdata.EEG.etc.sereega.components(c).signal, userdata.EEG.etc.sereega.signals(selection)];' ...
            'end;' ...
        'end;' ...
        cbf_set_userdata ...
        cbf_update_fields ...
        ];
cb_plot = [ ...
        cbf_get_userdata ...
        'c = ' cbf_get_value('currentcomponents', 'value') ...
        'plot_component(userdata.EEG.etc.sereega.components(c), userdata.EEG.etc.sereega.epochs, userdata.EEG.etc.sereega.leadfield);' ...
        ];
    
% geometry
nc = 10; nr = 10;
geom = { ...
        { nc nr [ 0  0]    ...  % title
                [ 3  1] }, ...
        { nc nr [ 0  2]    ...  % list
                [10  7] }, ...
        { nc nr [ 0  9]    ...  % button
                [ 2  1] }, ...
        { nc nr [ 2  9]    ...  % button
                [ 2  1] }, ...
        { nc nr [ 4  9]    ...  % button
                [ 2  1] }, ...
        { nc nr [ 6  9]    ...  % button
                [ 2  1] }, ...
        { nc nr [ 8  9]    ...  % button
                [ 2  1] }, ...
        };

% building gui
[~, userdata, ~, ~] = inputgui('geom', geom, ...
        'uilist', { ...
                { 'style', 'text', 'string', 'Assign signals to sources', 'fontweight', 'bold' }, ...
                { 'style' 'listbox' 'string' currentcomponentlist, 'tag', 'currentcomponents' } ...
                { 'style' 'pushbutton' 'string' 'Remove component', 'tag', 'rmcomp', 'callback', cb_rmcomp } ...
                { 'style' 'pushbutton' 'string' 'Remove signal', 'tag', 'rmsig', 'callback', cb_rmsig } ...
                { 'style' 'pushbutton' 'string' 'Add signal', 'tag', 'addsig', 'callback', cb_addsig } ...
                { 'style' 'pushbutton' 'string' 'Add signal to all', 'tag', 'addsigall', 'callback', cb_addsigall } ...
                { 'style' 'pushbutton' 'string' 'Plot component', 'tag', 'plot', 'callback', cb_plot } ...
                }, ... 
        'helpcom', 'pophelp(''pop_sereega_components'');', ...
        'title', 'Assign signals to sources', ...
        'userdata', userdata);

% saving made changes
if ~isempty(userdata)
    EEG = userdata.EEG;
end

valid = utl_isvalidcomponent(EEG.etc.sereega.components, EEG.etc.sereega.leadfield);
fprintf('Number of valid components: %d\n', sum(valid));
if sum(valid) ~= numel(valid)
    fprintf('Note: %d components remain without signals.\n', sum(~valid));
end

end
